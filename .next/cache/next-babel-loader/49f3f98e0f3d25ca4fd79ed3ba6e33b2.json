{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport firebase from 'firebase'; // Firebaseの初期化\n\nvar config = {\n  apiKey: \"AIzaSyAXqs5f06pIB3WFXUeZwF9z2Ue-cxPp2iw\",\n  authDomain: \"next-app-32b81.firebaseapp.com\",\n  databaseURL: \"https://next-app-32b81-default-rtdb.firebaseio.com\",\n  projectId: \"next-app-32b81\",\n  storageBucket: \"next-app-32b81.appspot.com\",\n  messagingSenderId: \"808565003407\",\n  appId: \"1:808565003407:web:996357a827feec72e50cfa\",\n  measurementId: \"G-NRZ14EXJND\"\n}; // Firebase初期化\n\nvar fireapp;\n\ntry {\n  firebase.initializeApp(config);\n} catch (error) {\n  console.log(error.message);\n}\n\nexport default fireapp; // ステート初期値\n\nconst initial = {\n  division: '',\n  login: false,\n  username: 'ログイン',\n  email: '',\n  data: [],\n  items: []\n}; // レデューサー\n\nfunction calcReducer(state = initial, action) {\n  switch (action.type) {\n    // 選択された課名\n    case 'DIVISION':\n      return {\n        division: action.division\n      };\n    // デフォルト\n\n    default:\n      return state;\n  }\n} // Redux Persistの設定\n\n\nconst persistConfig = {\n  key: 'root',\n  storage\n}; // パーシストレデューサーの作成\n\nconst persistedReducer = persistReducer(persistConfig, calcReducer); // initSotre関数(redux-store.jsで必要)\n\nexport function initStore(state = initial) {\n  return createStore(persistedReducer, state, applyMiddleware(thunkMiddleware));\n}","map":{"version":3,"sources":["C:/Users/NagatsuYuhei/next_app/store.js"],"names":["createStore","applyMiddleware","thunkMiddleware","persistReducer","storage","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fireapp","initializeApp","error","console","log","message","initial","division","login","username","email","data","items","calcReducer","state","action","type","persistConfig","key","persistedReducer","initStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAGA;;AACA,IAAIC,MAAM,GAAG;AACTC,EAAAA,MAAM,EAAE,yCADC;AAETC,EAAAA,UAAU,EAAE,gCAFH;AAGTC,EAAAA,WAAW,EAAE,oDAHJ;AAITC,EAAAA,SAAS,EAAE,gBAJF;AAKTC,EAAAA,aAAa,EAAE,4BALN;AAMTC,EAAAA,iBAAiB,EAAE,cANV;AAOTC,EAAAA,KAAK,EAAE,2CAPE;AAQTC,EAAAA,aAAa,EAAE;AARN,CAAb,C,CAWA;;AACA,IAAIC,OAAJ;;AACA,IAAI;AACAV,EAAAA,QAAQ,CAACW,aAAT,CAAuBV,MAAvB;AACH,CAFD,CAEE,OAAOW,KAAP,EAAc;AACZC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACH;;AACD,eAAeL,OAAf,C,CAEA;;AACA,MAAMM,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAC,EADG;AAEZC,EAAAA,KAAK,EAAE,KAFK;AAGZC,EAAAA,QAAQ,EAAE,MAHE;AAIZC,EAAAA,KAAK,EAAE,EAJK;AAKZC,EAAAA,IAAI,EAAE,EALM;AAMZC,EAAAA,KAAK,EAAE;AANK,CAAhB,C,CASA;;AACA,SAASC,WAAT,CAAsBC,KAAK,GAAGR,OAA9B,EAAuCS,MAAvC,EAAgD;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAK,UAAL;AAEI,aAAO;AACHT,QAAAA,QAAQ,EAACQ,MAAM,CAACR;AADb,OAAP;AAIJ;;AACA;AACI,aAAOO,KAAP;AAVR;AAYH,C,CAED;;;AACA,MAAMG,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElB7B,EAAAA;AAFkB,CAAtB,C,CAKA;;AACA,MAAM8B,gBAAgB,GAAG/B,cAAc,CAAE6B,aAAF,EAAiBJ,WAAjB,CAAvC,C,CAGA;;AACA,OAAO,SAASO,SAAT,CAAmBN,KAAK,GAAGR,OAA3B,EAAoC;AACvC,SAAOrB,WAAW,CAACkC,gBAAD,EAAmBL,KAAnB,EAA0B5B,eAAe,CAACC,eAAD,CAAzC,CAAlB;AACH","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport firebase from 'firebase';\r\n\r\n\r\n// Firebaseの初期化\r\nvar config = {\r\n    apiKey: \"AIzaSyAXqs5f06pIB3WFXUeZwF9z2Ue-cxPp2iw\",\r\n    authDomain: \"next-app-32b81.firebaseapp.com\",\r\n    databaseURL: \"https://next-app-32b81-default-rtdb.firebaseio.com\",\r\n    projectId: \"next-app-32b81\",\r\n    storageBucket: \"next-app-32b81.appspot.com\",\r\n    messagingSenderId: \"808565003407\",\r\n    appId: \"1:808565003407:web:996357a827feec72e50cfa\",\r\n    measurementId: \"G-NRZ14EXJND\"\r\n}\r\n\r\n// Firebase初期化\r\nvar fireapp;\r\ntry {\r\n    firebase.initializeApp(config);\r\n} catch (error) {\r\n    console.log(error.message);\r\n}\r\nexport default fireapp;\r\n\r\n// ステート初期値\r\nconst initial = {\r\n    division:'',\r\n    login: false,\r\n    username: 'ログイン',\r\n    email: '',\r\n    data: [],\r\n    items: []\r\n}\r\n\r\n// レデューサー\r\nfunction calcReducer (state = initial, action ) {\r\n    switch (action.type) {\r\n        // 選択された課名\r\n        case 'DIVISION':\r\n\r\n            return {\r\n                division:action.division\r\n            };\r\n\r\n        // デフォルト\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Redux Persistの設定\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\n// パーシストレデューサーの作成\r\nconst persistedReducer = persistReducer( persistConfig, calcReducer)\r\n\r\n\r\n// initSotre関数(redux-store.jsで必要)\r\nexport function initStore(state = initial) {\r\n    return createStore(persistedReducer, state, applyMiddleware(thunkMiddleware))\r\n}"]},"metadata":{},"sourceType":"module"}